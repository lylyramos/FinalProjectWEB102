{"ast":null,"code":"import { addMinutes } from \"./addMinutes.mjs\";\nimport { startOfMinute } from \"./startOfMinute.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\n * The {@link eachMinuteOfInterval} function options.\n */\n\n/**\n * @name eachMinuteOfInterval\n * @category Interval Helpers\n * @summary Return the array of minutes within the specified time interval.\n *\n * @description\n * Returns the array of minutes within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end\n *\n * @example\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\n * const result = eachMinuteOfInterval({\n *   start: new Date(2014, 9, 14, 13),\n *   end: new Date(2014, 9, 14, 13, 3)\n * })\n * //=> [\n * //   Wed Oct 14 2014 13:00:00,\n * //   Wed Oct 14 2014 13:01:00,\n * //   Wed Oct 14 2014 13:02:00,\n * //   Wed Oct 14 2014 13:03:00\n * // ]\n */\n\nexport function eachMinuteOfInterval(interval, options) {\n  var _options$step;\n\n  var startDate = startOfMinute(toDate(interval.start));\n  var endDate = toDate(interval.end);\n  var reversed = +startDate > +endDate;\n  var endTime = reversed ? +startDate : +endDate;\n  var currentDate = reversed ? endDate : startDate;\n  var step = (_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1;\n  if (!step) return [];\n\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  var dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addMinutes(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n} // Fallback for modularized imports:\n\nexport default eachMinuteOfInterval;","map":{"version":3,"names":["addMinutes","startOfMinute","toDate","eachMinuteOfInterval","interval","options","startDate","start","endDate","end","reversed","endTime","currentDate","step","dates","push","reverse"],"sources":["C:/Users/rdzly/Downloads/FinalProjectWEB102/client/node_modules/date-fns/eachMinuteOfInterval.mjs"],"sourcesContent":["import { addMinutes } from \"./addMinutes.mjs\";\nimport { startOfMinute } from \"./startOfMinute.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link eachMinuteOfInterval} function options.\n */\n\n/**\n * @name eachMinuteOfInterval\n * @category Interval Helpers\n * @summary Return the array of minutes within the specified time interval.\n *\n * @description\n * Returns the array of minutes within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end\n *\n * @example\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\n * const result = eachMinuteOfInterval({\n *   start: new Date(2014, 9, 14, 13),\n *   end: new Date(2014, 9, 14, 13, 3)\n * })\n * //=> [\n * //   Wed Oct 14 2014 13:00:00,\n * //   Wed Oct 14 2014 13:01:00,\n * //   Wed Oct 14 2014 13:02:00,\n * //   Wed Oct 14 2014 13:03:00\n * // ]\n */\nexport function eachMinuteOfInterval(interval, options) {\n  const startDate = startOfMinute(toDate(interval.start));\n  const endDate = toDate(interval.end);\n\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  let currentDate = reversed ? endDate : startDate;\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addMinutes(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachMinuteOfInterval;\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAA8BC,QAA9B,EAAwCC,OAAxC,EAAiD;EAAA;;EACtD,IAAMC,SAAS,GAAGL,aAAa,CAACC,MAAM,CAACE,QAAQ,CAACG,KAAV,CAAP,CAA/B;EACA,IAAMC,OAAO,GAAGN,MAAM,CAACE,QAAQ,CAACK,GAAV,CAAtB;EAEA,IAAIC,QAAQ,GAAG,CAACJ,SAAD,GAAa,CAACE,OAA7B;EACA,IAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACJ,SAAJ,GAAgB,CAACE,OAAzC;EACA,IAAII,WAAW,GAAGF,QAAQ,GAAGF,OAAH,GAAaF,SAAvC;EAEA,IAAIO,IAAI,oBAAGR,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEQ,IAAZ,yDAAoB,CAA5B;EACA,IAAI,CAACA,IAAL,EAAW,OAAO,EAAP;;EACX,IAAIA,IAAI,GAAG,CAAX,EAAc;IACZA,IAAI,GAAG,CAACA,IAAR;IACAH,QAAQ,GAAG,CAACA,QAAZ;EACD;;EAED,IAAMI,KAAK,GAAG,EAAd;;EAEA,OAAO,CAACF,WAAD,IAAgBD,OAAvB,EAAgC;IAC9BG,KAAK,CAACC,IAAN,CAAWb,MAAM,CAACU,WAAD,CAAjB;IACAA,WAAW,GAAGZ,UAAU,CAACY,WAAD,EAAcC,IAAd,CAAxB;EACD;;EAED,OAAOH,QAAQ,GAAGI,KAAK,CAACE,OAAN,EAAH,GAAqBF,KAApC;AACD,C,CAED;;AACA,eAAeX,oBAAf"},"metadata":{},"sourceType":"module"}