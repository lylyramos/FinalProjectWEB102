{"ast":null,"code":"import _slicedToArray from \"C:/Users/rdzly/Downloads/FinalProjectWEB102/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { millisecondsInDay } from \"./constants.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals. It uses the time\n * between dates to calculate the number of days, rounding it up to include\n * partial days.\n *\n * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n * result in 1.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n *\n * @returns The number of days that overlap in two time intervals\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nexport function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  var _sort = [+toDate(intervalLeft.start), +toDate(intervalLeft.end)].sort(function (a, b) {\n    return a - b;\n  }),\n      _sort2 = _slicedToArray(_sort, 2),\n      leftStart = _sort2[0],\n      leftEnd = _sort2[1];\n\n  var _sort3 = [+toDate(intervalRight.start), +toDate(intervalRight.end)].sort(function (a, b) {\n    return a - b;\n  }),\n      _sort4 = _slicedToArray(_sort3, 2),\n      rightStart = _sort4[0],\n      rightEnd = _sort4[1]; // Prevent NaN result if intervals don't overlap at all.\n\n\n  var isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n  if (!isOverlapping) return 0; // Remove the timezone offset to negate the DST effect on calculations.\n\n  var overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n  var left = overlapLeft - getTimezoneOffsetInMilliseconds(overlapLeft);\n  var overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n  var right = overlapRight - getTimezoneOffsetInMilliseconds(overlapRight); // Ceil the number to include partial days too.\n\n  return Math.ceil((right - left) / millisecondsInDay);\n} // Fallback for modularized imports:\n\nexport default getOverlappingDaysInIntervals;","map":{"version":3,"names":["getTimezoneOffsetInMilliseconds","millisecondsInDay","toDate","getOverlappingDaysInIntervals","intervalLeft","intervalRight","start","end","sort","a","b","leftStart","leftEnd","rightStart","rightEnd","isOverlapping","overlapLeft","left","overlapRight","right","Math","ceil"],"sources":["C:/Users/rdzly/Downloads/FinalProjectWEB102/client/node_modules/date-fns/getOverlappingDaysInIntervals.mjs"],"sourcesContent":["import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { millisecondsInDay } from \"./constants.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals. It uses the time\n * between dates to calculate the number of days, rounding it up to include\n * partial days.\n *\n * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n * result in 1.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n *\n * @returns The number of days that overlap in two time intervals\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nexport function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  const [leftStart, leftEnd] = [\n    +toDate(intervalLeft.start),\n    +toDate(intervalLeft.end),\n  ].sort((a, b) => a - b);\n  const [rightStart, rightEnd] = [\n    +toDate(intervalRight.start),\n    +toDate(intervalRight.end),\n  ].sort((a, b) => a - b);\n\n  // Prevent NaN result if intervals don't overlap at all.\n  const isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n  if (!isOverlapping) return 0;\n\n  // Remove the timezone offset to negate the DST effect on calculations.\n  const overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n  const left = overlapLeft - getTimezoneOffsetInMilliseconds(overlapLeft);\n  const overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n  const right = overlapRight - getTimezoneOffsetInMilliseconds(overlapRight);\n\n  // Ceil the number to include partial days too.\n  return Math.ceil((right - left) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default getOverlappingDaysInIntervals;\n"],"mappings":";AAAA,SAASA,+BAAT,QAAgD,4CAAhD;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,6BAAT,CAAuCC,YAAvC,EAAqDC,aAArD,EAAoE;EACzE,YAA6B,CAC3B,CAACH,MAAM,CAACE,YAAY,CAACE,KAAd,CADoB,EAE3B,CAACJ,MAAM,CAACE,YAAY,CAACG,GAAd,CAFoB,EAG3BC,IAH2B,CAGtB,UAACC,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,GAAGC,CAAd;EAAA,CAHsB,CAA7B;EAAA;EAAA,IAAOC,SAAP;EAAA,IAAkBC,OAAlB;;EAIA,aAA+B,CAC7B,CAACV,MAAM,CAACG,aAAa,CAACC,KAAf,CADsB,EAE7B,CAACJ,MAAM,CAACG,aAAa,CAACE,GAAf,CAFsB,EAG7BC,IAH6B,CAGxB,UAACC,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,GAAGC,CAAd;EAAA,CAHwB,CAA/B;EAAA;EAAA,IAAOG,UAAP;EAAA,IAAmBC,QAAnB,aALyE,CAUzE;;;EACA,IAAMC,aAAa,GAAGJ,SAAS,GAAGG,QAAZ,IAAwBD,UAAU,GAAGD,OAA3D;EACA,IAAI,CAACG,aAAL,EAAoB,OAAO,CAAP,CAZqD,CAczE;;EACA,IAAMC,WAAW,GAAGH,UAAU,GAAGF,SAAb,GAAyBA,SAAzB,GAAqCE,UAAzD;EACA,IAAMI,IAAI,GAAGD,WAAW,GAAGhB,+BAA+B,CAACgB,WAAD,CAA1D;EACA,IAAME,YAAY,GAAGJ,QAAQ,GAAGF,OAAX,GAAqBA,OAArB,GAA+BE,QAApD;EACA,IAAMK,KAAK,GAAGD,YAAY,GAAGlB,+BAA+B,CAACkB,YAAD,CAA5D,CAlByE,CAoBzE;;EACA,OAAOE,IAAI,CAACC,IAAL,CAAU,CAACF,KAAK,GAAGF,IAAT,IAAiBhB,iBAA3B,CAAP;AACD,C,CAED;;AACA,eAAeE,6BAAf"},"metadata":{},"sourceType":"module"}