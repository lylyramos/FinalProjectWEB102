{"ast":null,"code":"import _slicedToArray from \"C:/Users/rdzly/Downloads/FinalProjectWEB102/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { toDate } from \"./toDate.mjs\";\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param interval - The interval to check\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */\n\nexport function isWithinInterval(date, interval) {\n  var time = +toDate(date);\n\n  var _sort = [+toDate(interval.start), +toDate(interval.end)].sort(function (a, b) {\n    return a - b;\n  }),\n      _sort2 = _slicedToArray(_sort, 2),\n      startTime = _sort2[0],\n      endTime = _sort2[1];\n\n  return time >= startTime && time <= endTime;\n} // Fallback for modularized imports:\n\nexport default isWithinInterval;","map":{"version":3,"names":["toDate","isWithinInterval","date","interval","time","start","end","sort","a","b","startTime","endTime"],"sources":["C:/Users/rdzly/Downloads/FinalProjectWEB102/client/node_modules/date-fns/isWithinInterval.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param interval - The interval to check\n *\n * @returns The date is within the interval\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date })\n * // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end })\n * // => true\n */\nexport function isWithinInterval(date, interval) {\n  const time = +toDate(date);\n  const [startTime, endTime] = [\n    +toDate(interval.start),\n    +toDate(interval.end),\n  ].sort((a, b) => a - b);\n\n  return time >= startTime && time <= endTime;\n}\n\n// Fallback for modularized imports:\nexport default isWithinInterval;\n"],"mappings":";AAAA,SAASA,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,QAAhC,EAA0C;EAC/C,IAAMC,IAAI,GAAG,CAACJ,MAAM,CAACE,IAAD,CAApB;;EACA,YAA6B,CAC3B,CAACF,MAAM,CAACG,QAAQ,CAACE,KAAV,CADoB,EAE3B,CAACL,MAAM,CAACG,QAAQ,CAACG,GAAV,CAFoB,EAG3BC,IAH2B,CAGtB,UAACC,CAAD,EAAIC,CAAJ;IAAA,OAAUD,CAAC,GAAGC,CAAd;EAAA,CAHsB,CAA7B;EAAA;EAAA,IAAOC,SAAP;EAAA,IAAkBC,OAAlB;;EAKA,OAAOP,IAAI,IAAIM,SAAR,IAAqBN,IAAI,IAAIO,OAApC;AACD,C,CAED;;AACA,eAAeV,gBAAf"},"metadata":{},"sourceType":"module"}