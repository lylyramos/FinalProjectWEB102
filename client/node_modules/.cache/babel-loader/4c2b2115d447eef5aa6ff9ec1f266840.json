{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rdzly\\\\Downloads\\\\FinalProjectWEB102\\\\client\\\\src\\\\pages\\\\ReadPosts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport { supabase } from '../client';\nimport './ReadPosts.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadPosts = props => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [sortBy, setSortBy] = useState('newest'); // Default sorting by newest\n\n  const [loading, setLoading] = useState(false); // New state variable for loading\n\n  useEffect(() => {\n    async function fetchPosts() {\n      setLoading(true); // Set loading to true before fetching posts\n\n      let {\n        data,\n        error\n      } = await supabase.from('Final').select('*').order('created_at', {\n        ascending: sortBy === 'oldest'\n      });\n\n      if (error) {\n        console.log(\"error\", error);\n      } else {\n        setPosts(data);\n      }\n\n      setLoading(false); // Set loading to false after fetching posts\n    }\n\n    fetchPosts();\n  }, [sortBy]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 16\n    }, this); // Replace this with your loading animation\n  }\n\n  const handleSortChange = event => {\n    setSortBy(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sort-dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"sort\",\n        children: \"Sort by:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"sort\",\n        value: sortBy,\n        onChange: handleSortChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"newest\",\n          children: \"Newest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"oldest\",\n          children: \"Oldest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts\",\n      children: posts && posts.length > 0 ? posts.map((post, index) => /*#__PURE__*/_jsxDEV(Card, {\n        id: post.id,\n        name: post.name,\n        betCount: post.betCount,\n        createdTime: post.created_at\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: 'No Food Posts Yet ðŸ˜ž'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReadPosts, \"bzijPWUWMp4X0BfYWfZe8Fg7RIE=\");\n\n_c = ReadPosts;\nexport default ReadPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadPosts\");","map":{"version":3,"names":["React","useState","useEffect","Card","supabase","ReadPosts","props","posts","setPosts","sortBy","setSortBy","loading","setLoading","fetchPosts","data","error","from","select","order","ascending","console","log","handleSortChange","event","target","value","length","map","post","index","id","name","betCount","created_at"],"sources":["C:/Users/rdzly/Downloads/FinalProjectWEB102/client/src/pages/ReadPosts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from '../components/Card';\nimport { supabase } from '../client';\nimport './ReadPosts.css';\nconst ReadPosts = (props) => {\n    const [posts, setPosts] = useState([]);\n    const [sortBy, setSortBy] = useState('newest'); // Default sorting by newest\n    const [loading, setLoading] = useState(false); // New state variable for loading\n\n    useEffect(() => {\n        async function fetchPosts() {\n            setLoading(true); // Set loading to true before fetching posts\n            let { data, error } = await supabase\n                .from('Final')\n                .select('*')\n                .order('created_at', { ascending: sortBy === 'oldest' });\n    \n            if (error) {\n                console.log(\"error\", error);\n            } else {\n                setPosts(data);\n            }\n            setLoading(false); // Set loading to false after fetching posts\n        }\n    \n        fetchPosts();\n    }, [sortBy]);\n    if (loading) {\n        return <div>Loading...</div>; // Replace this with your loading animation\n    }\n\n    const handleSortChange = (event) => {\n        setSortBy(event.target.value);\n    };\n\n    return (\n        <div>\n            <div className=\"sort-dropdown\">\n                <label htmlFor=\"sort\">Sort by:</label>\n                <select id=\"sort\" value={sortBy} onChange={handleSortChange}>\n                    <option value=\"newest\">Newest</option>\n                    <option value=\"oldest\">Oldest</option>\n                </select>\n            </div>\n            <div className=\"posts\">\n                {posts && posts.length > 0 ?\n                    posts.map((post, index) =>\n                        <Card key={index} id={post.id} name={post.name} betCount={post.betCount} createdTime={post.created_at} />\n                    ) : <h2>{'No Food Posts Yet ðŸ˜ž'}</h2>\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default ReadPosts;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAO,iBAAP;;;AACA,MAAMC,SAAS,GAAIC,KAAD,IAAW;EAAA;;EACzB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,QAAD,CAApC,CAFyB,CAEuB;;EAChD,MAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC,CAHyB,CAGsB;;EAE/CC,SAAS,CAAC,MAAM;IACZ,eAAeW,UAAf,GAA4B;MACxBD,UAAU,CAAC,IAAD,CAAV,CADwB,CACN;;MAClB,IAAI;QAAEE,IAAF;QAAQC;MAAR,IAAkB,MAAMX,QAAQ,CAC/BY,IADuB,CAClB,OADkB,EAEvBC,MAFuB,CAEhB,GAFgB,EAGvBC,KAHuB,CAGjB,YAHiB,EAGH;QAAEC,SAAS,EAAEV,MAAM,KAAK;MAAxB,CAHG,CAA5B;;MAKA,IAAIM,KAAJ,EAAW;QACPK,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,KAArB;MACH,CAFD,MAEO;QACHP,QAAQ,CAACM,IAAD,CAAR;MACH;;MACDF,UAAU,CAAC,KAAD,CAAV,CAZwB,CAYL;IACtB;;IAEDC,UAAU;EACb,CAjBQ,EAiBN,CAACJ,MAAD,CAjBM,CAAT;;EAkBA,IAAIE,OAAJ,EAAa;IACT,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP,CADS,CACqB;EACjC;;EAED,MAAMW,gBAAgB,GAAIC,KAAD,IAAW;IAChCb,SAAS,CAACa,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;EACH,CAFD;;EAIA,oBACI;IAAA,wBACI;MAAK,SAAS,EAAC,eAAf;MAAA,wBACI;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAQ,EAAE,EAAC,MAAX;QAAkB,KAAK,EAAEhB,MAAzB;QAAiC,QAAQ,EAAEa,gBAA3C;QAAA,wBACI;UAAQ,KAAK,EAAC,QAAd;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAQ,KAAK,EAAC,QAAd;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAQI;MAAK,SAAS,EAAC,OAAf;MAAA,UACKf,KAAK,IAAIA,KAAK,CAACmB,MAAN,GAAe,CAAxB,GACGnB,KAAK,CAACoB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBACN,QAAC,IAAD;QAAkB,EAAE,EAAED,IAAI,CAACE,EAA3B;QAA+B,IAAI,EAAEF,IAAI,CAACG,IAA1C;QAAgD,QAAQ,EAAEH,IAAI,CAACI,QAA/D;QAAyE,WAAW,EAAEJ,IAAI,CAACK;MAA3F,GAAWJ,KAAX;QAAA;QAAA;QAAA;MAAA,QADJ,CADH,gBAGO;QAAA,UAAK;MAAL;QAAA;QAAA;QAAA;MAAA;IAJZ;MAAA;MAAA;MAAA;IAAA,QARJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAkBH,CAjDD;;GAAMxB,S;;KAAAA,S;AAmDN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}