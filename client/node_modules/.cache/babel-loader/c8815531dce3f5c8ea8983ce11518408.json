{"ast":null,"code":"import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n/**\n * The {@link roundToNearestHours} function options.\n */\n\n/**\n * @name roundToNearestHours\n * @category Hour Helpers\n * @summary Rounds the given date to the nearest hour\n *\n * @description\n * Rounds the given date to the nearest hour (or number of hours).\n * Rounds up when the given date is exactly between the nearest round hours.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to round\n * @param options - An object with options.\n *\n * @returns The new date rounded to the closest hour\n *\n * @example\n * // Round 10 July 2014 12:34:56 to nearest hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56))\n * //=> Thu Jul 10 2014 13:00:00\n *\n * @example\n * // Round 10 July 2014 12:34:56 to nearest half hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 6 })\n * //=> Thu Jul 10 2014 12:00:00\n\n * @example\n * // Round 10 July 2014 12:34:56 to nearest half hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 8 })\n * //=> Thu Jul 10 2014 16:00:00\n\n* @example\n * // Floor (rounds down) 10 July 2014 12:34:56 to nearest hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 1, 23, 45), { roundingMethod: 'ceil' })\n * //=> Thu Jul 10 2014 02:00:00\n *\n * @example\n * // Ceil (rounds up) 10 July 2014 12:34:56 to nearest quarter hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { roundingMethod: 'floor', nearestTo: 8 })\n * //=> Thu Jul 10 2014 08:00:00\n */\n\nexport function roundToNearestHours(date, options) {\n  var _options$nearestTo, _options$roundingMeth;\n\n  var nearestTo = (_options$nearestTo = options === null || options === void 0 ? void 0 : options.nearestTo) !== null && _options$nearestTo !== void 0 ? _options$nearestTo : 1;\n  if (nearestTo < 1 || nearestTo > 12) return constructFrom(date, NaN);\n\n  var _date = toDate(date);\n\n  var fractionalMinutes = _date.getMinutes() / 60;\n  var fractionalSeconds = _date.getSeconds() / 60 / 60;\n  var fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60 / 60;\n  var hours = _date.getHours() + fractionalMinutes + fractionalSeconds + fractionalMilliseconds; // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'\n\n  var method = (_options$roundingMeth = options === null || options === void 0 ? void 0 : options.roundingMethod) !== null && _options$roundingMeth !== void 0 ? _options$roundingMeth : \"round\";\n  var roundingMethod = getRoundingMethod(method); // nearestTo option does not care daylight savings time\n\n  var roundedHours = roundingMethod(hours / nearestTo) * nearestTo;\n  var result = constructFrom(date, _date);\n  result.setHours(roundedHours, 0, 0, 0);\n  return result;\n} // Fallback for modularized imports:\n\nexport default roundToNearestHours;","map":{"version":3,"names":["getRoundingMethod","constructFrom","toDate","roundToNearestHours","date","options","nearestTo","NaN","_date","fractionalMinutes","getMinutes","fractionalSeconds","getSeconds","fractionalMilliseconds","getMilliseconds","hours","getHours","method","roundingMethod","roundedHours","result","setHours"],"sources":["C:/Users/rdzly/Downloads/FinalProjectWEB102/client/node_modules/date-fns/roundToNearestHours.mjs"],"sourcesContent":["import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link roundToNearestHours} function options.\n */\n\n/**\n * @name roundToNearestHours\n * @category Hour Helpers\n * @summary Rounds the given date to the nearest hour\n *\n * @description\n * Rounds the given date to the nearest hour (or number of hours).\n * Rounds up when the given date is exactly between the nearest round hours.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to round\n * @param options - An object with options.\n *\n * @returns The new date rounded to the closest hour\n *\n * @example\n * // Round 10 July 2014 12:34:56 to nearest hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56))\n * //=> Thu Jul 10 2014 13:00:00\n *\n * @example\n * // Round 10 July 2014 12:34:56 to nearest half hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 6 })\n * //=> Thu Jul 10 2014 12:00:00\n\n * @example\n * // Round 10 July 2014 12:34:56 to nearest half hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 8 })\n * //=> Thu Jul 10 2014 16:00:00\n\n* @example\n * // Floor (rounds down) 10 July 2014 12:34:56 to nearest hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 1, 23, 45), { roundingMethod: 'ceil' })\n * //=> Thu Jul 10 2014 02:00:00\n *\n * @example\n * // Ceil (rounds up) 10 July 2014 12:34:56 to nearest quarter hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { roundingMethod: 'floor', nearestTo: 8 })\n * //=> Thu Jul 10 2014 08:00:00\n */\nexport function roundToNearestHours(date, options) {\n  const nearestTo = options?.nearestTo ?? 1;\n\n  if (nearestTo < 1 || nearestTo > 12) return constructFrom(date, NaN);\n\n  const _date = toDate(date);\n  const fractionalMinutes = _date.getMinutes() / 60;\n  const fractionalSeconds = _date.getSeconds() / 60 / 60;\n  const fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60 / 60;\n  const hours =\n    _date.getHours() +\n    fractionalMinutes +\n    fractionalSeconds +\n    fractionalMilliseconds;\n\n  // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'\n  const method = options?.roundingMethod ?? \"round\";\n  const roundingMethod = getRoundingMethod(method);\n\n  // nearestTo option does not care daylight savings time\n  const roundedHours = roundingMethod(hours / nearestTo) * nearestTo;\n\n  const result = constructFrom(date, _date);\n  result.setHours(roundedHours, 0, 0, 0);\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default roundToNearestHours;\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,8BAAlC;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,OAAnC,EAA4C;EAAA;;EACjD,IAAMC,SAAS,yBAAGD,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEC,SAAZ,mEAAyB,CAAxC;EAEA,IAAIA,SAAS,GAAG,CAAZ,IAAiBA,SAAS,GAAG,EAAjC,EAAqC,OAAOL,aAAa,CAACG,IAAD,EAAOG,GAAP,CAApB;;EAErC,IAAMC,KAAK,GAAGN,MAAM,CAACE,IAAD,CAApB;;EACA,IAAMK,iBAAiB,GAAGD,KAAK,CAACE,UAAN,KAAqB,EAA/C;EACA,IAAMC,iBAAiB,GAAGH,KAAK,CAACI,UAAN,KAAqB,EAArB,GAA0B,EAApD;EACA,IAAMC,sBAAsB,GAAGL,KAAK,CAACM,eAAN,KAA0B,IAA1B,GAAiC,EAAjC,GAAsC,EAArE;EACA,IAAMC,KAAK,GACTP,KAAK,CAACQ,QAAN,KACAP,iBADA,GAEAE,iBAFA,GAGAE,sBAJF,CATiD,CAejD;;EACA,IAAMI,MAAM,4BAAGZ,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEa,cAAZ,yEAA8B,OAA1C;EACA,IAAMA,cAAc,GAAGlB,iBAAiB,CAACiB,MAAD,CAAxC,CAjBiD,CAmBjD;;EACA,IAAME,YAAY,GAAGD,cAAc,CAACH,KAAK,GAAGT,SAAT,CAAd,GAAoCA,SAAzD;EAEA,IAAMc,MAAM,GAAGnB,aAAa,CAACG,IAAD,EAAOI,KAAP,CAA5B;EACAY,MAAM,CAACC,QAAP,CAAgBF,YAAhB,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC;EACA,OAAOC,MAAP;AACD,C,CAED;;AACA,eAAejB,mBAAf"},"metadata":{},"sourceType":"module"}